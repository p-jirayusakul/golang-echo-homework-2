// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/p-jirayusakul/golang-echo-homework-2/database (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockup -destination test/mockup/store.go github.com/p-jirayusakul/golang-echo-homework-2/database Store
//

// Package mockup is a generated GoMock package.
package mockup

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	database "github.com/p-jirayusakul/golang-echo-homework-2/database"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccounts mocks base method.
func (m *MockStore) CreateAccounts(arg0 database.Accounts) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccounts", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccounts indicates an expected call of CreateAccounts.
func (mr *MockStoreMockRecorder) CreateAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccounts", reflect.TypeOf((*MockStore)(nil).CreateAccounts), arg0)
}

// CreateAddress mocks base method.
func (m *MockStore) CreateAddress(arg0 database.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockStoreMockRecorder) CreateAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockStore)(nil).CreateAddress), arg0)
}

// CreateProfiles mocks base method.
func (m *MockStore) CreateProfiles(arg0 database.Profiles) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfiles indicates an expected call of CreateProfiles.
func (mr *MockStoreMockRecorder) CreateProfiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfiles", reflect.TypeOf((*MockStore)(nil).CreateProfiles), arg0)
}

// DeleteAddress mocks base method.
func (m *MockStore) DeleteAddress(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockStoreMockRecorder) DeleteAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockStore)(nil).DeleteAddress), arg0)
}

// DeleteProfiles mocks base method.
func (m *MockStore) DeleteProfiles(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfiles indicates an expected call of DeleteProfiles.
func (mr *MockStoreMockRecorder) DeleteProfiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfiles", reflect.TypeOf((*MockStore)(nil).DeleteProfiles), arg0)
}

// GetAccounts mocks base method.
func (m *MockStore) GetAccounts(arg0 string) (database.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0)
	ret0, _ := ret[0].(database.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockStoreMockRecorder) GetAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockStore)(nil).GetAccounts), arg0)
}

// GetAddress mocks base method.
func (m *MockStore) GetAddress(arg0 uuid.UUID) (database.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0)
	ret0, _ := ret[0].(database.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockStoreMockRecorder) GetAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStore)(nil).GetAddress), arg0)
}

// GetProfiles mocks base method.
func (m *MockStore) GetProfiles(arg0 uuid.UUID) (database.Profiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", arg0)
	ret0, _ := ret[0].(database.Profiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockStoreMockRecorder) GetProfiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockStore)(nil).GetProfiles), arg0)
}

// IsEmailAlreadyExists mocks base method.
func (m *MockStore) IsEmailAlreadyExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailAlreadyExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailAlreadyExists indicates an expected call of IsEmailAlreadyExists.
func (mr *MockStoreMockRecorder) IsEmailAlreadyExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailAlreadyExists", reflect.TypeOf((*MockStore)(nil).IsEmailAlreadyExists), arg0)
}

// UpdateAddress mocks base method.
func (m *MockStore) UpdateAddress(arg0 database.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockStoreMockRecorder) UpdateAddress(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockStore)(nil).UpdateAddress), arg0)
}

// UpdateProfiles mocks base method.
func (m *MockStore) UpdateProfiles(arg0 database.UpdateProfilesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfiles indicates an expected call of UpdateProfiles.
func (mr *MockStoreMockRecorder) UpdateProfiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfiles", reflect.TypeOf((*MockStore)(nil).UpdateProfiles), arg0)
}
